import { createStore } from 'redux'

const TICK = 'TICK'
const INPUT_NOTE = 'INPUT_NOTE'
const LOAD_TRACKS = 'LOAD_TRACKS'

const initialState = {
  trackMapping: { 46: 0, 49: 1, 38: 2, 48: 3, 36: 4, 47: 5, 43: 6, 51: 7 },
  now: Date.now(),
  // tracks: [[], [], [], [], [], [], [], []],
  tracks: [
    [],
    [
      1498408482311,
      1498408482718,
      1498408483113,
      1498408483501,
      1498408483907,
      1498408484276,
      1498408484685,
      1498408485069,
      1498408485463,
      1498408485858,
      1498408486253,
      1498408486651,
      1498408487051,
      1498408487459,
      1498408488305,
      1498408488719,
      1498408489107,
      1498408489509,
      1498408489874,
    ],
    [
      1498408481702,
      1498408481909,
      1498408482056,
      1498408482088,
      1498408482703,
      1498408483492,
      1498408485053,
      1498408485852,
      1498408486641,
      1498408487451,
      1498408488302,
      1498408489103,
      1498408489869,
    ],
    [1498408487750],
    [
      1498408482317,
      1498408482475,
      1498408483095,
      1498408483263,
      1498408483858,
      1498408484051,
      1498408484650,
      1498408484847,
      1498408485440,
      1498408485641,
      1498408486244,
      1498408486446,
      1498408487034,
      1498408487243,
      1498408487838,
      1498408488067,
      1498408488695,
      1498408488875,
      1498408489473,
      1498408489644,
    ],
    [],
    [1498408481911, 1498408487811],
    [],
  ],
  // tracks: [
  //   [
  //     1498403838826,
  //     1498403839019,
  //     1498403839239,
  //     1498403839661,
  //     1498403839869,
  //     1498403840089,
  //     1498403840294,
  //     1498403840509,
  //     1498403840715,
  //     1498403840944,
  //     1498403841150,
  //     1498403841375,
  //     1498403841588,
  //     1498403841825,
  //     1498403842027,
  //     1498403842270,
  //     1498403842478,
  //     1498403842705,
  //     1498403842915,
  //     1498403843145,
  //     1498403843361,
  //     1498403843584,
  //     1498403843782,
  //     1498403844025,
  //     1498403844237,
  //     1498403844459,
  //     1498403844665,
  //     1498403844896,
  //     1498403845112,
  //     1498403845337,
  //     1498403845548,
  //     1498403845786,
  //     1498403845997,
  //     1498403846218,
  //     1498403846415,
  //     1498403846654,
  //     1498403846864,
  //     1498403847095,
  //     1498403847316,
  //     1498403847553,
  //     1498403847760,
  //     1498403847985,
  //     1498403848203,
  //     1498403848432,
  //     1498403848630,
  //     1498403848867,
  //     1498403849083,
  //     1498403849312,
  //     1498403849533,
  //     1498403849770,
  //     1498403849973,
  //     1498403850213,
  //     1498403850419,
  //     1498403850657,
  //     1498403850866,
  //     1498403851107,
  //     1498403851315,
  //     1498403851556,
  //     1498403851740,
  //   ],
  //   [
  //     1498403825675,
  //     1498403826095,
  //     1498403826514,
  //     1498403826915,
  //     1498403827327,
  //     1498403827703,
  //     1498403828124,
  //     1498403828527,
  //     1498403828942,
  //     1498403829360,
  //     1498403829755,
  //     1498403830169,
  //     1498403830583,
  //     1498403830990,
  //     1498403831839,
  //     1498403832259,
  //     1498403832664,
  //     1498403833087,
  //     1498403833492,
  //     1498403833912,
  //     1498403834307,
  //     1498403834720,
  //     1498403835123,
  //     1498403835538,
  //     1498403835941,
  //     1498403836346,
  //     1498403836750,
  //     1498403837145,
  //     1498403837559,
  //     1498403838405,
  //     1498403852572,
  //   ],
  //   [
  //     1498403825086,
  //     1498403825292,
  //     1498403826090,
  //     1498403826916,
  //     1498403827715,
  //     1498403828525,
  //     1498403829353,
  //     1498403830160,
  //     1498403830986,
  //     1498403831833,
  //     1498403832661,
  //     1498403833494,
  //     1498403834297,
  //     1498403835118,
  //     1498403835933,
  //     1498403836741,
  //     1498403837553,
  //     1498403838405,
  //     1498403839237,
  //     1498403839472,
  //     1498403840082,
  //     1498403840945,
  //     1498403841830,
  //     1498403842709,
  //     1498403843590,
  //     1498403844462,
  //     1498403845331,
  //     1498403846229,
  //     1498403847110,
  //     1498403847988,
  //     1498403848871,
  //     1498403849767,
  //     1498403850645,
  //     1498403851535,
  //     1498403851917,
  //     1498403851973,
  //     1498403852082,
  //     1498403852301,
  //   ],
  //   [1498403831248, 1498403837832],
  //   [],
  //   [1498403825089, 1498403825295, 1498403831344, 1498403837912],
  //   [],
  // ],
}

const rootReducer = (state = initialState, action) => {
  switch (action.type) {
    case TICK:
      return { ...state, now: action.payload }
    case LOAD_TRACKS:
      return { ...state, tracks: action.payload }
    case INPUT_NOTE:
      if (action.payload.intensity === 0) return state

      const trackIndex = state.trackMapping[action.payload.note]
      if (trackIndex === undefined) return state

      return {
        ...state,
        tracks: state.tracks.map((track, index) => {
          if (index !== trackIndex) return track
          return [...track, action.payload.timestamp]
        }),
      }
    default:
      return state
  }
}

// actions
export const tick = now => ({ type: TICK, payload: now })
export const inputNote = info => ({ type: INPUT_NOTE, payload: info })
export const loadTracks = tracks => ({ type: LOAD_TRACKS, payload: tracks })

// selectors
export const getFirstNoteTimestamp = state =>
  state.tracks.reduce((min, notes) => (notes[0] < min ? notes[0] : min), Number.MAX_SAFE_INTEGER)

export const getNormalizedNotes = state => {
  const start = getFirstNoteTimestamp(state)
  return state.tracks.map(notes => notes.map(note => note - start))
}

export const getElapsedTime = state => state.now - getFirstNoteTimestamp(state)

export const getTracksAndNotesPosition = state => {
  const travelTime = 2000
  const elapsedTime = getElapsedTime(state)
  // const elapsedTime = 0

  return getNormalizedNotes(state).map(notes => {
    return notes
      .map((note, index) => [index, (elapsedTime - note) / travelTime * 100])
      .filter(note => note[1] >= 0 && note[1] <= 100)
  })
}

export default createStore(
  rootReducer,
  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
)
